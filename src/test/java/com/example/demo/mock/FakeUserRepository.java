package com.example.demo.mock;

import com.example.demo.domain.user.entity.model.User;
import com.example.demo.domain.user.enums.UserStatus;
import com.example.demo.domain.user.repository.impl.UserRepository;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Objects;
import java.util.concurrent.atomic.AtomicLong;

public class FakeUserRepository implements UserRepository {
    private final AtomicLong autoGeneratedId = new AtomicLong(0);
    private final List<User> data = Collections.synchronizedList(new ArrayList<>());

    @Override
    public User findByIdAndStatus(long id, UserStatus userStatus) {
        return data.stream()
                .filter(item -> item.id() == id && item.status() == userStatus)
                .findFirst()
                .orElse(null);
    }

    @Override
    public User findByEmailAndStatus(String email, UserStatus userStatus) {
        return data.stream()
                .filter(item -> item.email().equals(email) && item.status() == userStatus)
                .findAny()
                .orElse(null);
    }

    @Override
    public void save(User user) {
        if (user.id() == null || user.id() == 0) {
            User newUser = User.builder()
                    .id(autoGeneratedId.incrementAndGet())
                    .email(user.email())
                    .nickName(user.nickName())
                    .address(user.address())
                    .certificationCode(user.certificationCode())
                    .status(user.status())
                    .lastLoginAt(user.lastLoginAt())
                    .build();
            data.add(newUser);
        } else {
            data.removeIf(item -> Objects.equals(item.id(), user.id()));
            data.add(user);
        }
    }
}
